#!/bin/bash 
shopt -s extglob;
read -p "Enter the name of the table " name_table
if [ -f "../database/$name_database/$name_table" ]
then
     
     
     #coulm name
     x=0
     num_fild=$(awk 'BEGIN{FS=":";i=0}{if(NR==1)i=NF}END{ print i }' ../database/$name_database/$name_table)
     #echo "$num_fild"
     while [ $x -lt  $num_fild ]
     do 
        let x=$x+1
        coul=$(awk -v i=$x 'BEGIN{FS=":";a=""}{if(NR==1) a=$i }END{print a} ' ../database/$name_database/$name_table)
        let x=$x-1
        col_name[x]=$coul
        let x=$x+1
     done
     
     
    #data type --------------------------------------------------------------------------------
    x=0
    while [ $x -lt  $num_fild ]
     do 
        let x=$x+1
        data=$(awk -v i=$x 'BEGIN{FS=":";a=""}{if(NR==2) a=$i }END{print a} ' ../database/$name_database/$name_table)
        let x=$x-1
        data_name[x]=$data
        let x=$x+1
     done
     
     
    #old primary key -------------------------------------------------------------------------
      echo "enter ${col_name[0]}  is thet you want to update its data "
      read old_value
      check_old_value="no"
      check_old_value=$(awk -v n=$old_value 'BEGIN{FS=":";i="no"}{if($1==n)i="yes"}END{print i }' ../database/$name_database/$name_table)
      #echo "$check_old_value"
      if [ $check_old_value == "yes" ]
      then
      old_values=$(awk -v n=$old_value 'BEGIN{FS=":";i=" "}{if($1==n)i=$0}END{print i }' ../database/$name_database/$name_table) 
      #check new primary key-----------------------------------------------------------------------------    
                   
	     type_pk="no"
	     checkpk="no"
	     p_k="no"
	     while [ $p_k == "no" ]
		 do
		   echo "enter new value for  ${col_name[0]}  is primary key data type is ${data_name[0]} "
		   read new_value
		   if [ $new_value==$old_value ]
		   then
		       values[0]="$new_value"
		       break
		   fi    
		   #check unique----------------------------------------------------------------------
		   checkpk=$(awk -v n=$value 'BEGIN{FS=":";i="yes"}{if($1==n)i="no"}END{print i }' ../database/$name_database/$name_table)
		   
		   #check data type--------------------------------------------------------------------
		   if [ ${data_name[0]} = "int" ]
		    then
		         type_int="[0-9]+"
		        if [[ $value =~ $type_int ]]
		        then
		              type_pk="yes"      
		        fi 
		   else
		         type_char="[a-zA-Z]+"
		        if [[ $value =~ $type_char ]]
		        then
		              type_pk="yes"      
		        fi 
		   fi
		   
		           
		   if [[ $checkpk == "yes" ]] && [[ $type_pk = "yes"  ]]
		     then 
		         p_k="yes"
		          values[0]="$new_value"
		     else
		          echo "error , check that data type is identical and the primary key is unique , enter agin  "
		           checkpk=" "
		           let type_pk="no" 
		   fi 
	     done 
	     
	     
	     #check value ---------------------------------------------------------------------------------
	     
	     type=""
	     x=1
	     #echo "$x"
	     while [ $x -lt  $num_fild ]
	     do
	       echo "enter new value ${col_name[x]} and data type ${data_name[x]}"
	       read value
	       type=${data_name[x]}
	       typevalu=""
		case $value in
		        +([0-9])) typevalu="int" 
		        ;;
		        +([A-Za-z])) typevalu="char"
		        ;;	  
		        *) typevalu="not match"
		        ;;
		esac;  
		if [ $typevalu == $type  ]
		then
		    values[x]=":$value"
		    let x=$x+1
		else
		    echo "data type not match enter agin"
		fi       
	    done
	  
	    new_values=${values[*]}
	    echo "old values is"
	    echo "$old_values"
	    echo "new values is"
	    echo "$new_values"
	    sed -i "s/$old_values/$new_values/g" ../database/$name_database/$name_table
	    
     else
	 echo " not found ${col_name[0]} "  
     fi
else
  echo "not found table"
fi


shopt -u extglob;  
